//// some variables

const categoryColl = db.collection('categories');
const entitiesColl = db.collection('entities');
const usersColl = db.collection('users');

// * _________________ adding categroies function ___________
const addCategory = async (data) => {
	let promise = await categoryColl
		.add(data)
		.then(async (doc) => {
			swal('Category added !');
		})
		.catch((e) => {
			console.log(e); // todo remove this
		});
};

// * ______________ adding entities here _____________________

const addEntity = async (data) => {
	let promise = await entitiesColl
		.add(data)
		.then(async (doc) => {
			swal('Entity added !');
		})
		.catch((e) => {
			console.log(e); // todo remove this
		});
};

// * _________________ adding entities with csv __________________
const addBulkEntities = async (arrObj, len) => {
	let batch = db.batch(); // creating a batch in of database

	//  looping through all entities in csv file
	for (let i = 0; i < len - 1; i++) {
		let data = {
			category: arrobj[i].category,
			name: arrObj[i].name,
		};

		let docRef = entitiesColl.doc(); // ref to autogenerated doc

		batch.set(docRef, data);
	}

	// commiting batch
	batch
		.commit()
		.then(() => {
			swal('added');
		})
		.catch((e) => {
			console.log(e);
		});
};

// * _________________________ getting categories ______________________
const getCategories = async () => {
	return categoryColl
		.get()
		.then(async (snapshot) => {
			return snapshot.docs.map((doc) => doc.data());
		})
		.catch((e) => {
			console.log(e);
		});
};

// * _________________________ getting specific category ________________
const getDetailsCat = async (val1, val2) => {
	return categoryColl
		.where(val1, '==', val2)
		.get()
		.then((snapshot) => {
			return snapshot.docs.map((doc) => doc.data());
		});
};

// * __________________________ getting entities _______________________
const getEntities = async (cat) => {
	return entitiesColl
		.where('category', '==', cat)
		.get()
		.then((snapshot) => {
			return snapshot.docs;
		});
};

// * __________________________getting specific entity _________________
const getDetailsEnt = async (id) => {
	return entitiesColl.doc(id).get();
};

// * __________________________adding user ______________________________
const addUser = async (data) => {
	let promise = await usersColl
		.add(data)
		.then((doc) => {
			swal('user added !');
		})
		.catch((e) => {
			console.log(e);
		});
};

// * __________________________getting users ____________________
const getUsers = async () => {
	return usersColl.get().then((snapshot) => {
		return snapshot.docs;
	});
};

// * ___________________ deleting user _________________
const delUser = async (id) => {
	usersColl
		.doc(id)
		.delete()
		.then(() => {
			console.log('user deleted');
		})
		.catch((e) => {
			console.log(e);
		});
};

// * _____________________getting user catgories ________________
const userCategories = async (id) => {
	return usersColl
		.doc(id)
		.collection('categories')
		.get()
		.then((snapshot) => {
			return snapshot.docs;
		});
};

// * ______________Adding category to user _________________________
const addCatUserFunc = async (id, cats) => {
	//let promise = await usersColl.doc(id).collection('categories').add();
	let batch = db.batch(); // creating a batch in of database
	let len = cats.length;

	//  looping through all entities in csv file
	for (let i = 0; i < len; i++) {
		let data = {
			category: cats[i],
		};

		let docRef = usersColl.doc(id).collection('categories').doc(); // ref to autogenerated doc

		batch.set(docRef, data);
	}

	// commiting batch
	batch
		.commit()
		.then(() => {
			swal('added');
		})
		.catch((e) => {
			console.log(e);
		});
};

// * _______________removing user category _________________________
const remUserCatFunc = async (id, catId) => {
	let promise = await usersColl
		.doc(id)
		.collection('categories')
		.doc(catId)
		.delete()
		.then(() => {
			console.log('removed');
		})
		.catch((e) => {
			console.log(e);
		});
};
